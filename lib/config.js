"use strict";
exports.defaults = function() {
  return {
    couchdb: {
      sources: []
    }
  };
};

exports.placeholder = function() {
  return "\t\n\n  # couchdb:        # Configuration of the couchdb provisioning tool\n    # destination:\n        server: \"http://localhost:5984\"  # the couchdb server you want to provision\n    # sources: []   # array of url's of couchdb databases which should be replicated from\n                    # this can be used to easily clone a production environment for local development\n    # replications: []  # array of replication objects which should be created for the development environment\n    # secrets:\n    #   path: \"couchdb_development_secrets.js\"\n    #   user_prefix: \"devuser_\"\n    #";
};

exports.validate = function(config, validators) {
  var errors, ex, _i, _len, _ref, _ref1;
  errors = [];
  if (validators.ifExistsIsObject(errors, "couchddoc config", config.minify)) {
    if (validators.ifExistsIsArray(errors, "minify.exclude", config.minify.exclude)) {
      _ref = config.minify.exclude;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ex = _ref[_i];
        if (typeof ex !== "string") {
          errors.push("minify.exclude must be an array of strings");
          break;
        }
      }
    }
  }
  if (errors.length === 0 && ((_ref1 = config.minify.exclude) != null ? _ref1.length : void 0) > 0) {
    config.minify.exclude = new RegExp(config.minify.exclude.join("|"), "i");
  }
  return errors;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtY291Y2hkYi9saWIvY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtY291Y2hkYi9zcmMvY29uZmlnLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxZQUFBLENBQUE7QUFBQSxPQU9PLENBQUMsUUFBUixHQUFtQixTQUFBLEdBQUE7U0FDakI7QUFBQSxJQUFBLE9BQUEsRUFDRTtBQUFBLE1BQUEsT0FBQSxFQUFTLEVBQVQ7S0FERjtJQURpQjtBQUFBLENBUG5CLENBQUE7O0FBQUEsT0FvQk8sQ0FBQyxXQUFSLEdBQXNCLFNBQUEsR0FBQTtTQUNwQixzbEJBRG9CO0FBQUEsQ0FwQnRCLENBQUE7O0FBQUEsT0E2Q08sQ0FBQyxRQUFSLEdBQW1CLFNBQUMsTUFBRCxFQUFTLFVBQVQsR0FBQTtBQUNqQixNQUFBLGlDQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsRUFBVCxDQUFBO0FBQ0EsRUFBQSxJQUFHLFVBQVUsQ0FBQyxnQkFBWCxDQUE0QixNQUE1QixFQUFvQyxrQkFBcEMsRUFBd0QsTUFBTSxDQUFDLE1BQS9ELENBQUg7QUFDRSxJQUFBLElBQUcsVUFBVSxDQUFDLGVBQVgsQ0FBMkIsTUFBM0IsRUFBbUMsZ0JBQW5DLEVBQXFELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBbkUsQ0FBSDtBQUNFO0FBQUEsV0FBQSwyQ0FBQTtzQkFBQTtBQUNFLFFBQUEsSUFBTyxNQUFBLENBQUEsRUFBQSxLQUFhLFFBQXBCO0FBQ0UsVUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLDRDQUFaLENBQUEsQ0FBQTtBQUNBLGdCQUZGO1NBREY7QUFBQSxPQURGO0tBREY7R0FEQTtBQWFBLEVBQUEsSUFBRyxNQUFNLENBQUMsTUFBUCxLQUFpQixDQUFqQixvREFBNEMsQ0FBRSxnQkFBdkIsR0FBZ0MsQ0FBMUQ7QUFDRSxJQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBZCxHQUE0QixJQUFBLE1BQUEsQ0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUF0QixDQUEyQixHQUEzQixDQUFQLEVBQXdDLEdBQXhDLENBQTVCLENBREY7R0FiQTtTQWdCQSxPQWpCaUI7QUFBQSxDQTdDbkIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiMjIyMgTW9kdWxlIENvbmZpZ3VyYXRpb25cblxuIyBUaGUgY29kZSBjb250YWluZWQgaGVyZWluIGlzIGFsbCBleGFtcGxlIGNvZGUgYW5kIHNob3VsZG4ndCBiZSB1c2VkIHZlcmJhdGltLlxuIyBUaGUgZXhhbXBsZSBpbiB0aGlzIGNhc2UgaXMgbW9kaWZpZWQgZnJvbSB0aGUgbWltb3NhLW1pbmlmeSBtb2R1bGUuXG5cblwidXNlIHN0cmljdFwiXG5cbiMgVGhlIGRlZmF1bHRzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBKU09OIG9iamVjdCBjb250YWluaW5nIHRoZSBkZWZhdWx0XG4jIGNvbmZpZyBmb3IgeW91ciBtb2R1bGUuIElmIHlvdXIgbW9kdWxlIGhhcyBubyBjb25maWcsIHRoZSBmdW5jdGlvbiBjYW4gYmVcbiMgcmVtb3ZlZCBvciByZXR1cm4gbnVsbC4gTWltb3NhIHVzZXMgdGhpcyBmdW5jdGlvbiB3aGVuIGFwcGx5aW5nIGRlZmF1bHRcbiMgY29uZmlndXJhdGlvbiB0byBhIHVzZXIncyBjb25maWcuXG5cbmV4cG9ydHMuZGVmYXVsdHMgPSAtPlxuICBjb3VjaGRiOlxuICAgIHNvdXJjZXM6IFtdXG5cblxuIyBUaGUgcGxhY2Vob2xkZXIgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlXG4jIG1pbW9zYS1jb25maWcgcGxhY2Vob2xkZXIgZm9yIHlvdXIgY29uZmlndXJhdGlvbiBkZWZhdWx0cyBpbmNsdWRpbmdcbiMgZXhwbGFuYXRpb25zIGZvciBlYWNoIGNvbmZpZyBzZXR0aW5nIHdoZXJlIGFwcHJvcHJpYXRlLiAgVGhlIGNvbnRlbnRcbiMgb2YgdGhlIHN0cmluZyBzaG91bGQgYmUgYWxsIGNvbW1lbnRlZCBvdXQuIElmIHlvdSBoYXZlIG5vIGNvbmZpZyxcbiMgdGhlIGZ1bmN0aW9uIGNhbiBiZSByZW1vdmVkIG9yIGNhbiByZXR1cm4gbnVsbC4gIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkXG4jIHdoZW4gTWltb3NhIGlzIGNyZWF0aW5nIGFuIGluaXRpYWwgbWltb3NhLWNvbmZpZyB1c2luZyAnbWltb3NhIG5ldycgb3JcbiMgJ21pbW9zYSBjb25maWcnXG5cbmV4cG9ydHMucGxhY2Vob2xkZXIgPSAtPlxuICBcIlwiXCJcbiAgXFx0XG5cbiAgICAjIGNvdWNoZGI6ICAgICAgICAjIENvbmZpZ3VyYXRpb24gb2YgdGhlIGNvdWNoZGIgcHJvdmlzaW9uaW5nIHRvb2xcbiAgICAgICMgZGVzdGluYXRpb246XG4gICAgICAgICAgc2VydmVyOiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTk4NFwiICAjIHRoZSBjb3VjaGRiIHNlcnZlciB5b3Ugd2FudCB0byBwcm92aXNpb25cbiAgICAgICMgc291cmNlczogW10gICAjIGFycmF5IG9mIHVybCdzIG9mIGNvdWNoZGIgZGF0YWJhc2VzIHdoaWNoIHNob3VsZCBiZSByZXBsaWNhdGVkIGZyb21cbiAgICAgICAgICAgICAgICAgICAgICAjIHRoaXMgY2FuIGJlIHVzZWQgdG8gZWFzaWx5IGNsb25lIGEgcHJvZHVjdGlvbiBlbnZpcm9ubWVudCBmb3IgbG9jYWwgZGV2ZWxvcG1lbnRcbiAgICAgICMgcmVwbGljYXRpb25zOiBbXSAgIyBhcnJheSBvZiByZXBsaWNhdGlvbiBvYmplY3RzIHdoaWNoIHNob3VsZCBiZSBjcmVhdGVkIGZvciB0aGUgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRcbiAgICAgICMgc2VjcmV0czpcbiAgICAgICMgICBwYXRoOiBcImNvdWNoZGJfZGV2ZWxvcG1lbnRfc2VjcmV0cy5qc1wiXG4gICAgICAjICAgdXNlcl9wcmVmaXg6IFwiZGV2dXNlcl9cIlxuICAgICAgI1xuICBcIlwiXCJcblxuIyBUaGUgdmFsaWRhdGUgZnVuY3Rpb24gdGFrZXMgYSBjb25maWcgb2JqZWN0ICh3aGljaCBpcyB0aGUgZW50aXJlXG4jIG1pbW9zYS1jb25maWcpIGFuZCBhIHZhbGlkYXRvcnMgb2JqZWN0IHdoaWNoIGNvbnRhaW5zIHNldmVyYWwgdXNlZnVsXG4jIHZhbGlkYXRpb24gbWV0aG9kcy4gVXNpbmcgY3VzdG9tIHZhbGlkYXRpb24gYW5kIHZhbGlkYXRpb24gcHJvdmlkZWRcbiMgdmlhIHRoZSB2YWxpZGF0b3JzLCB0aGUgdmFsaWRhdGUgbWV0aG9kIHNob3VsZCBmaW5kIHRoZSBtb2R1bGUgc3BlY2lmaWNcbiMgY29uZmlnLCB2YWxpZGF0ZSB0aGUgc2V0dGluZ3MgYW5kIHJldHVybiBhIGxpc3Qgb2Ygc3RyaW5ncyB0aGF0IGFyZVxuIyB2YWxpZGF0aW9uIGVycm9yIG1lc3NhZ2VzLiBJZiB0aGVyZSBhcmUgbm8gZXJyb3JzLCByZXR1cm4gYW4gZW1wdHlcbiMgYXJyYXkgb3IgcmV0dXJuIG5vdGhpbmcuICBNaW1vc2EgdXNlcyB0aGlzIGZ1bmN0aW9uIHdoZW4gTWltb3NhIHN0YXJ0c1xuIyB1cCB0byBlbnN1cmUgdGhlIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gc2V0IHByb3Blcmx5LlxuXG5leHBvcnRzLnZhbGlkYXRlID0gKGNvbmZpZywgdmFsaWRhdG9ycykgLT5cbiAgZXJyb3JzID0gW11cbiAgaWYgdmFsaWRhdG9ycy5pZkV4aXN0c0lzT2JqZWN0KGVycm9ycywgXCJjb3VjaGRkb2MgY29uZmlnXCIsIGNvbmZpZy5taW5pZnkpXG4gICAgaWYgdmFsaWRhdG9ycy5pZkV4aXN0c0lzQXJyYXkoZXJyb3JzLCBcIm1pbmlmeS5leGNsdWRlXCIsIGNvbmZpZy5taW5pZnkuZXhjbHVkZSlcbiAgICAgIGZvciBleCBpbiBjb25maWcubWluaWZ5LmV4Y2x1ZGVcbiAgICAgICAgdW5sZXNzIHR5cGVvZiBleCBpcyBcInN0cmluZ1wiXG4gICAgICAgICAgZXJyb3JzLnB1c2ggXCJtaW5pZnkuZXhjbHVkZSBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3NcIlxuICAgICAgICAgIGJyZWFrXG5cbiAgIyBUaGUgdmFsaWRhdGUgZnVuY3Rpb24gaXMgYWxzbyBhbiBvcHBvcnR1bml0eSB0byBkbyBjb25maWd1cmF0aW9uIG1hc3NhZ2luZyxcbiAgIyBmb3IgaW5zdGFuY2UsIHR1cm5pbmcgYSBsaXN0IG9mIHN0cmluZ3MgaW50byBhIHNpbmdsZSBSZWdFeHAuICBDaGFuZ2VzXG4gICMgbWFkZSB0byB0aGUgY29uZmlnIGluc2lkZSB2YWxpZGF0ZSBhcmUgcGVybWFtZW50IGFuZCBjYXJyaWVkIHRocm91Z2hvdXRcbiAgIyB0aGUgY3VycmVudGx5IHJ1bm5pbmcgTWltb3NhIHByb2Nlc3MuXG5cbiAgaWYgZXJyb3JzLmxlbmd0aCBpcyAwIGFuZCBjb25maWcubWluaWZ5LmV4Y2x1ZGU/Lmxlbmd0aCA+IDBcbiAgICBjb25maWcubWluaWZ5LmV4Y2x1ZGUgPSBuZXcgUmVnRXhwIGNvbmZpZy5taW5pZnkuZXhjbHVkZS5qb2luKFwifFwiKSwgXCJpXCJcblxuICBlcnJvcnNcbiJdfQ==
