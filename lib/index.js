"use strict";
var compileVault, config, fs, logger, registration, sjcl, _, _compileExtension, _encryptOrJsonify, _outputFileName, _requireFromString, _transformOutput;

fs = require('fs');

config = require('./config');

logger = null;

compileVault = require('./plugin');

sjcl = require('sjcl');

_ = require('underscore');

_requireFromString = function(src, filename) {
  var Module, m;
  Module = module.constructor;
  m = new Module();
  m._compile(src, filename);
  return m.exports;
};

_outputFileName = function(mimosaConfig, inputFileName) {
  return inputFileName.replace(mimosaConfig.extensionRegex, mimosaConfig.outputExtension);
};

_encryptOrJsonify = function(passwords, encryptionSecret) {
  if (_.isNull(encryptionSecret)) {
    return JSON.stringify(passwords);
  }
  return JSON.stringify(sjcl.encrypt(encryptionSecret, JSON.stringify(passwords)));
};

_transformOutput = function(passwords, vaultConfig) {
  var isEncrypted, module, moduleFunc, vaultText;
  vaultText = _encryptOrJsonify(passwords, vaultConfig.encryptionSecret);
  isEncrypted = !_.isNull(vaultConfig.encryptionSecret);
  if (vaultConfig.outputFormat === "json") {
    return vaultText;
  } else if (vaultConfig.outputFormat === "commonjs") {
    module = "var embeddedVault = " + vaultText + ";\n";
    if (!isEncrypted) {
      moduleFunc = function() {
        return embeddedVault;
      };
    } else {
      module += "var sjcl = require('sjcl');\n";
      moduleFunc = function(password) {
        return JSON.parse(sjcl.decrypt(password, embeddedVault));
      };
    }
    module += "module.exports = " + moduleFunc.toString();
    return module;
  }
};

_compileExtension = function(mimosaConfig, options, next) {
  var err, file, json_obj, vaultConfig;
  vaultConfig = mimosaConfig.vault;
  logger = mimosaConfig.log;
  if (options.inputFile.match(vaultConfig.extensionRegex)) {
    file = options.files[0];
    try {
      json_obj = _requireFromString(file.outputFileText, file.outputFileName);
      file.outputFileText = _transformOutput(compileVault(vaultConfig.passwordGenerationSecret, json_obj), vaultConfig);
      file.outputFileName = _outputFileName(vaultConfig, file.outputFileName);
    } catch (_error) {
      err = _error;
      logger.error("mimosa-vault failed to process [[ " + file.inputFileName + " ]]: " + err);
      options.files.splice(options.files.indexOf(file, 1));
    }
  }
  return next();
};

registration = function(mimosaConfig, register) {
  var extensions;
  extensions = mimosaConfig.extensions.javascript;
  return register(['buildFile', 'add', 'update'], 'afterCompile', _compileExtension, extensions);
};

module.exports = {
  registration: registration,
  defaults: config.defaults,
  placeholder: config.placeholder,
  validate: config.validate
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtdmF1bHQvbGliL2luZGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtdmF1bHQvc3JjL2luZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxZQUFBLENBQUE7QUFBQSxJQUFBLG9KQUFBOztBQUFBLEVBRUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQUZMLENBQUE7O0FBQUEsTUFHQSxHQUFTLE9BQUEsQ0FBUSxVQUFSLENBSFQsQ0FBQTs7QUFBQSxNQUlBLEdBQVMsSUFKVCxDQUFBOztBQUFBLFlBS0EsR0FBZSxPQUFBLENBQVEsVUFBUixDQUxmLENBQUE7O0FBQUEsSUFNQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBTlAsQ0FBQTs7QUFBQSxDQU9BLEdBQUksT0FBQSxDQUFRLFlBQVIsQ0FQSixDQUFBOztBQUFBLGtCQVNBLEdBQXFCLFNBQUMsR0FBRCxFQUFNLFFBQU4sR0FBQTtBQUNuQixNQUFBLFNBQUE7QUFBQSxFQUFBLE1BQUEsR0FBUyxNQUFNLENBQUMsV0FBaEIsQ0FBQTtBQUFBLEVBQ0EsQ0FBQSxHQUFRLElBQUEsTUFBQSxDQUFBLENBRFIsQ0FBQTtBQUFBLEVBRUEsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxHQUFYLEVBQWdCLFFBQWhCLENBRkEsQ0FBQTtBQUdBLFNBQU8sQ0FBQyxDQUFDLE9BQVQsQ0FKbUI7QUFBQSxDQVRyQixDQUFBOztBQUFBLGVBZUEsR0FBa0IsU0FBQyxZQUFELEVBQWUsYUFBZixHQUFBO1NBQ2hCLGFBQWEsQ0FBQyxPQUFkLENBQXNCLFlBQVksQ0FBQyxjQUFuQyxFQUFtRCxZQUFZLENBQUMsZUFBaEUsRUFEZ0I7QUFBQSxDQWZsQixDQUFBOztBQUFBLGlCQWtCQSxHQUFvQixTQUFDLFNBQUQsRUFBWSxnQkFBWixHQUFBO0FBRWxCLEVB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LEdBQUE7QUFDYixNQUFBLFVBQUE7QUFBQSxFQUFBLFVBQUEsR0FBYSxZQUFZLENBQUMsVUFBVSxDQUFDLFVBQXJDLENBQUE7U0FDQSxRQUFBLENBQVMsQ0FBQyxXQUFELEVBQWEsS0FBYixFQUFtQixRQUFuQixDQUFULEVBQXVDLGNBQXZDLEVBQXVELGlCQUF2RCxFQUEwRSxVQUExRSxFQUZhO0FBQUEsQ0E1RGYsQ0FBQTs7QUFBQSxNQWdFTSxDQUFDLE9BQVAsR0FDRTtBQUFBLEVBQUEsWUFBQSxFQUFpQixZQUFqQjtBQUFBLEVBQ0EsUUFBQSxFQUFpQixNQUFNLENBQUMsUUFEeEI7QUFBQSxFQUVBLFdBQUEsRUFBaUIsTUFBTSxDQUFDLFdBRnhCO0FBQUEsRUFHQSxRQUFBLEVBQWlCLE1BQU0sQ0FBQyxRQUh4QjtDQWpFRixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIyMjIyBNb2R1bGUgSW50ZXJmYWNlXG5cblwidXNlIHN0cmljdFwiXG5cbmZzID0gcmVxdWlyZSAnZnMnXG5jb25maWcgPSByZXF1aXJlICcuL2NvbmZpZydcbmxvZ2dlciA9IG51bGxcbmNvbXBpbGVWYXVsdCA9IHJlcXVpcmUoJy4vcGx1Z2luJylcbnNqY2wgPSByZXF1aXJlKCdzamNsJylcbl8gPSByZXF1aXJlICd1bmRlcnNjb3JlJ1xuXG5fcmVxdWlyZUZyb21TdHJpbmcgPSAoc3JjLCBmaWxlbmFtZSkgLT5cbiAgTW9kdWxlID0gbW9kdWxlLmNvbnN0cnVjdG9yXG4gIG0gPSBuZXcgTW9kdWxlKClcbiAgbS5fY29tcGlsZShzcmMsIGZpbGVuYW1lKVxuICByZXR1cm4gbS5leHBvcnRzXG5cbl9vdXRwdXRGaWxlTmFtZSA9IChtaW1vc2FDb25maWcsIGlucHV0RmlsZU5hbWUpIC0+XG4gIGlucHV0RmlsZU5hbWUucmVwbGFjZShtaW1vc2FDb25maWcuZXh0ZW5zaW9uUmVnZXgsIG1pbW9zYUNvbmZpZy5vdXRwdXRFeHRlbnNpb24pXG5cbl9lbmNyeXB0T3JKc29uaWZ5ID0gKHBhc3N3b3JkcywgZW5jcnlwdGlvblNlY3JldCkgLT5cbiAgIyBpZiBubyBlbmNyeXB0aW9uIGtleXMgd2VyZSBzdXBwbGllZCwgcmV0dXJuIHRoZSBwbGFpbnRleHQgYXMgYSBzdHJpbmdcbiAgaWYgXy5pc051bGwoZW5jcnlwdGlvblNlY3JldClcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocGFzc3dvcmRzKVxuXG4gICMgb3RoZXJ3aXNlLCByZXR1cm4gdGhlIHZhdWx0IHJlcHJlc2VudGVkIGFzIGFuIGVuY3J5cHRlZCBzdHJpbmdcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHNqY2wuZW5jcnlwdChlbmNyeXB0aW9uU2VjcmV0LCBKU09OLnN0cmluZ2lmeShwYXNzd29yZHMpKSlcblxuX3RyYW5zZm9ybU91dHB1dCA9IChwYXNzd29yZHMsIHZhdWx0Q29uZmlnKSAtPlxuICAjIHRoaXMgd2lsbCBnaXZlIHVzIHRoZSB2YXVsdFRleHQgcmVwcmVzZW50YXRpb24gZW5jcnlwdGVkIG9yIG5vdCBhcyBkZWNpZGVkIGJ5IHZhdWx0Q29uZmlnLmVuY3J5cHRXaXRoIHBhcmFtZXRlclxuICB2YXVsdFRleHQgPSBfZW5jcnlwdE9ySnNvbmlmeShwYXNzd29yZHMsIHZhdWx0Q29uZmlnLmVuY3J5cHRpb25TZWNyZXQpXG5cbiAgaXNFbmNyeXB0ZWQgPSBub3QgXy5pc051bGwodmF1bHRDb25maWcuZW5jcnlwdGlvblNlY3JldClcblxuICBpZiB2YXVsdENvbmZpZy5vdXRwdXRGb3JtYXQgaXMgXCJqc29uXCJcbiAgICByZXR1cm4gdmF1bHRUZXh0XG4gIGVsc2UgaWYgdmF1bHRDb25maWcub3V0cHV0Rm9ybWF0IGlzIFwiY29tbW9uanNcIlxuICAgIG1vZHVsZSA9IFwidmFyIGVtYmVkZGVkVmF1bHQgPSAje3ZhdWx0VGV4dH07XFxuXCJcbiAgICBpZiBub3QgaXNFbmNyeXB0ZWRcbiAgICAgIG1vZHVsZUZ1bmMgPSAoKSAtPiBlbWJlZGRlZFZhdWx0XG4gICAgZWxzZVxuICAgICAgbW9kdWxlICs9IFwidmFyIHNqY2wgPSByZXF1aXJlKCdzamNsJyk7XFxuXCJcbiAgICAgIG1vZHVsZUZ1bmMgPSAocGFzc3dvcmQpIC0+IEpTT04ucGFyc2Uoc2pjbC5kZWNyeXB0KHBhc3N3b3JkLCBlbWJlZGRlZFZhdWx0KSlcbiAgICBtb2R1bGUgKz0gXCJtb2R1bGUuZXhwb3J0cyA9IFwiICsgbW9kdWxlRnVuYy50b1N0cmluZygpXG4gICAgcmV0dXJuIG1vZHVsZVxuXG5fY29tcGlsZUV4dGVuc2lvbiA9IChtaW1vc2FDb25maWcsIG9wdGlvbnMsIG5leHQpIC0+XG4gIHZhdWx0Q29uZmlnID0gbWltb3NhQ29uZmlnLnZhdWx0XG4gIGxvZ2dlciA9IG1pbW9zYUNvbmZpZy5sb2dcblxuICBpZiAob3B0aW9ucy5pbnB1dEZpbGUubWF0Y2godmF1bHRDb25maWcuZXh0ZW5zaW9uUmVnZXgpKVxuICAgIGZpbGUgPSBvcHRpb25zLmZpbGVzWzBdXG4gICAgdHJ5XG4gICAgICBqc29uX29iaiA9IF9yZXF1aXJlRnJvbVN0cmluZyhmaWxlLm91dHB1dEZpbGVUZXh0LCBmaWxlLm91dHB1dEZpbGVOYW1lKVxuXG4gICAgICBmaWxlLm91dHB1dEZpbGVUZXh0ID0gX3RyYW5zZm9ybU91dHB1dChjb21waWxlVmF1bHQodmF1bHRDb25maWcucGFzc3dvcmRHZW5lcmF0aW9uU2VjcmV0LCBqc29uX29iaiksIHZhdWx0Q29uZmlnKVxuICAgICAgZmlsZS5vdXRwdXRGaWxlTmFtZSA9IF9vdXRwdXRGaWxlTmFtZSh2YXVsdENvbmZpZywgZmlsZS5vdXRwdXRGaWxlTmFtZSlcbiAgICBjYXRjaCBlcnJcbiAgICAgIGxvZ2dlci5lcnJvcihcIm1pbW9zYS12YXVsdCBmYWlsZWQgdG8gcHJvY2VzcyBbWyAje2ZpbGUuaW5wdXRGaWxlTmFtZX0gXV06ICN7ZXJyfVwiKVxuICAgICAgb3B0aW9ucy5maWxlcy5zcGxpY2Uob3B0aW9ucy5maWxlcy5pbmRleE9mKGZpbGUsIDEpKVxuICBuZXh0KClcblxucmVnaXN0cmF0aW9uID0gKG1pbW9zYUNvbmZpZywgcmVnaXN0ZXIpIC0+XG4gIGV4dGVuc2lvbnMgPSBtaW1vc2FDb25maWcuZXh0ZW5zaW9ucy5qYXZhc2NyaXB0XG4gIHJlZ2lzdGVyKFsnYnVpbGRGaWxlJywnYWRkJywndXBkYXRlJ10sICdhZnRlckNvbXBpbGUnLCBfY29tcGlsZUV4dGVuc2lvbiwgZXh0ZW5zaW9ucyk7XG5cbm1vZHVsZS5leHBvcnRzID1cbiAgcmVnaXN0cmF0aW9uOiAgICByZWdpc3RyYXRpb25cbiAgZGVmYXVsdHM6ICAgICAgICBjb25maWcuZGVmYXVsdHNcbiAgcGxhY2Vob2xkZXI6ICAgICBjb25maWcucGxhY2Vob2xkZXJcbiAgdmFsaWRhdGU6ICAgICAgICBjb25maWcudmFsaWRhdGUiXX0=
