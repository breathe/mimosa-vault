"use strict";
var compileVault, config, fs, logger, registration, sjcl, _, _compileExtension, _encryptOrJsonify, _outputFileName, _requireFromString, _transformOutput;

fs = require('fs');

config = require('./config');

logger = null;

compileVault = require('./plugin');

sjcl = require('sjcl');

_ = require('underscore');

_requireFromString = function(src, filename) {
  var Module, m;
  Module = module.constructor;
  m = new Module();
  m._compile(src, filename);
  return m.exports;
};

_outputFileName = function(mimosaConfig, inputFileName) {
  return inputFileName.replace(mimosaConfig.extensionRegex, mimosaConfig.outputExtension);
};

_encryptOrJsonify = function(passwords, encryptionSecret) {
  if (_.isNull(encryptionSecret)) {
    return JSON.stringify(passwords);
  }
  console.log("preparing to encrypt with " + encryptionSecret);
  return JSON.stringify(sjcl.encrypt(encryptionSecret, JSON.stringify(passwords)));
};

_transformOutput = function(passwords, vaultConfig) {
  var isEncrypted, module, moduleFunc, vaultText;
  vaultText = _encryptOrJsonify(passwords, vaultConfig.encryptionSecret);
  isEncrypted = !_.isNull(vaultConfig.encryptionSecret);
  if (vaultConfig.outputFormat === "json") {
    return vaultText;
  } else if (vaultConfig.outputFormat === "commonjs") {
    module = "var embeddedVault = " + vaultText + ";\n";
    if (!isEncrypted) {
      moduleFunc = function() {
        return embeddedVault;
      };
    } else {
      module += "var sjcl = require('sjcl');\n";
      moduleFunc = function(password) {
        return JSON.parse(sjcl.decrypt(password, embeddedVault));
      };
    }
    module += "module.exports = " + moduleFunc.toString();
    return module;
  }
};

_compileExtension = function(mimosaConfig, options, next) {
  var err, file, json_obj, vaultConfig;
  vaultConfig = mimosaConfig.vault;
  logger = mimosaConfig.log;
  if (options.inputFile.match(vaultConfig.extensionRegex)) {
    file = options.files[0];
    try {
      json_obj = _requireFromString(file.outputFileText, file.outputFileName);
      file.outputFileText = _transformOutput(compileVault(vaultConfig.passwordGenerationSecret, json_obj), vaultConfig);
      file.outputFileName = _outputFileName(vaultConfig, file.outputFileName);
    } catch (_error) {
      err = _error;
      logger.error("mimosa-vault failed to process [[ " + file.inputFileName + " ]]: " + err);
      options.files.splice(options.files.indexOf(file, 1));
    }
  }
  return next();
};

registration = function(mimosaConfig, register) {
  var extensions;
  extensions = mimosaConfig.extensions.javascript;
  return register(['buildFile', 'add', 'update'], 'afterCompile', _compileExtension, extensions);
};

module.exports = {
  registration: registration,
  defaults: config.defaults,
  placeholder: config.placeholder,
  validate: config.validate
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtdmF1bHQvbGliL2luZGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtdmF1bHQvc3JjL2luZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxZQUFBLENBQUE7QUFBQSxJQUFBLG9KQUFBOztBQUFBLEVBRUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQUZMLENBQUE7O0FBQUEsTUFHQSxHQUFTLE9BQUEsQ0FBUSxVQUFSLENBSFQsQ0FBQTs7QUFBQSxNQUlBLEdBQVMsSUFKVCxDQUFBOztBQUFBLFlBS0EsR0FBZSxPQUFBLENBQVEsVUFBUixDQUxmLENBQUE7O0FBQUEsSUFNQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBTlAsQ0FBQTs7QUFBQSxDQU9BLEdBQUksT0FBQSxDQUFRLFlBQVIsQ0FQSixDQUFBOztBQUFBLGtCQVNBLEdBQXFCLFNBQUMsR0FBRCxFQUFNLFFBQU4sR0FBQTtBQUNuQixNQUFBLFNBQUE7QUFBQSxFQUFBLE1BQUEsR0FBUyxNQUFNLENBQUMsV0FBaEIsQ0FBQTtBQUFBLEVBQ0EsQ0FBQSxHQUFRLElBQUEsTUFBQSxDQUFBLENBRFIsQ0FBQTtBQUFBLEVBRUEsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxHQUFYLEVBQWdCLFFBQWhCLENBRkEsQ0FBQTtBQUdBLFNBQU8sQ0FBQyxDQUFDLE9BQVQsQ0FKbUI7QUFBQSxDQVRyQixDQUFBOztBQUFBLGVBZUEsR0FBa0IsU0FBQyxZQUFELEVBQWUsYUFBZixHQUFBO1NBQ2hCLGFBQWEsQ0FBQyxPQUFkLENBQXNCLFlBQVksQ0FBQyxjQUFuQyxFQUFtRCxZQUFZLENBQUMsZUFBaEUsRUFEZ0I7QUFBQSxDQWZsQixDQUFBOztBQUFBLGlCQWtCQSxHQUFvQixTQUFDLFNBQUQsRUFBWSxnQkFBWixHQUFBO0FBRWxCLEVB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RUFka0I7QUFBQSxDQTdDcEIsQ0FBQTs7QUFBQSxZQTZEQSxHQUFlLFNBQUMsWUFBRCxFQUFlLFFBQWYsR0FBQTtBQUNiLE1BQUEsVUFBQTtBQUFBLEVBQUEsVUFBQSxHQUFhLFlBQVksQ0FBQyxVQUFVLENBQUMsVUFBckMsQ0FBQTtTQUNBLFFBQUEsQ0FBUyxDQUFDLFdBQUQsRUFBYSxLQUFiLEVBQW1CLFFBQW5CLENBQVQsRUFBdUMsY0FBdkMsRUFBdUQsaUJBQXZELEVBQTBFLFVBQTFFLEVBRmE7QUFBQSxDQTdEZixDQUFBOztBQUFBLE1BaUVNLENBQUMsT0FBUCxHQUNFO0FBQUEsRUFBQSxZQUFBLEVBQWlCLFlBQWpCO0FBQUEsRUFDQSxRQUFBLEVBQWlCLE1BQU0sQ0FBQyxRQUR4QjtBQUFBLEVBRUEsV0FBQSxFQUFpQixNQUFNLENBQUMsV0FGeEI7QUFBQSxFQUdBLFFBQUEsRUFBaUIsTUFBTSxDQUFDLFFBSHhCO0NBbEVGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjIyMjIE1vZHVsZSBJbnRlcmZhY2VcblxuXCJ1c2Ugc3RyaWN0XCJcblxuZnMgPSByZXF1aXJlICdmcydcbmNvbmZpZyA9IHJlcXVpcmUgJy4vY29uZmlnJ1xubG9nZ2VyID0gbnVsbFxuY29tcGlsZVZhdWx0ID0gcmVxdWlyZSgnLi9wbHVnaW4nKVxuc2pjbCA9IHJlcXVpcmUoJ3NqY2wnKVxuXyA9IHJlcXVpcmUgJ3VuZGVyc2NvcmUnXG5cbl9yZXF1aXJlRnJvbVN0cmluZyA9IChzcmMsIGZpbGVuYW1lKSAtPlxuICBNb2R1bGUgPSBtb2R1bGUuY29uc3RydWN0b3JcbiAgbSA9IG5ldyBNb2R1bGUoKVxuICBtLl9jb21waWxlKHNyYywgZmlsZW5hbWUpXG4gIHJldHVybiBtLmV4cG9ydHNcblxuX291dHB1dEZpbGVOYW1lID0gKG1pbW9zYUNvbmZpZywgaW5wdXRGaWxlTmFtZSkgLT5cbiAgaW5wdXRGaWxlTmFtZS5yZXBsYWNlKG1pbW9zYUNvbmZpZy5leHRlbnNpb25SZWdleCwgbWltb3NhQ29uZmlnLm91dHB1dEV4dGVuc2lvbilcblxuX2VuY3J5cHRPckpzb25pZnkgPSAocGFzc3dvcmRzLCBlbmNyeXB0aW9uU2VjcmV0KSAtPlxuICAjIGlmIG5vIGVuY3J5cHRpb24ga2V5cyB3ZXJlIHN1cHBsaWVkLCByZXR1cm4gdGhlIHBsYWludGV4dCBhcyBhIHN0cmluZ1xuICBpZiBfLmlzTnVsbChlbmNyeXB0aW9uU2VjcmV0KVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwYXNzd29yZHMpXG5cbiAgIyBvdGhlcndpc2UsIHJldHVybiB0aGUgdmF1bHQgcmVwcmVzZW50ZWQgYXMgYW4gZW5jcnlwdGVkIHN0cmluZ1xuICBjb25zb2xlLmxvZyhcInByZXBhcmluZyB0byBlbmNyeXB0IHdpdGggI3tlbmNyeXB0aW9uU2VjcmV0fVwiKVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc2pjbC5lbmNyeXB0KGVuY3J5cHRpb25TZWNyZXQsIEpTT04uc3RyaW5naWZ5KHBhc3N3b3JkcykpKVxuXG5fdHJhbnNmb3JtT3V0cHV0ID0gKHBhc3N3b3JkcywgdmF1bHRDb25maWcpIC0+XG4gICMgdGhpcyB3aWxsIGdpdmUgdXMgdGhlIHZhdWx0VGV4dCByZXByZXNlbnRhdGlvbiBlbmNyeXB0ZWQgb3Igbm90IGFzIGRlY2lkZWQgYnkgdmF1bHRDb25maWcuZW5jcnlwdFdpdGggcGFyYW1ldGVyXG4gIHZhdWx0VGV4dCA9IF9lbmNyeXB0T3JKc29uaWZ5KHBhc3N3b3JkcywgdmF1bHRDb25maWcuZW5jcnlwdGlvblNlY3JldClcblxuICBpc0VuY3J5cHRlZCA9IG5vdCBfLmlzTnVsbCh2YXVsdENvbmZpZy5lbmNyeXB0aW9uU2VjcmV0KVxuXG4gIGlmIHZhdWx0Q29uZmlnLm91dHB1dEZvcm1hdCBpcyBcImpzb25cIlxuICAgIHJldHVybiB2YXVsdFRleHRcbiAgZWxzZSBpZiB2YXVsdENvbmZpZy5vdXRwdXRGb3JtYXQgaXMgXCJjb21tb25qc1wiXG4gICAgbW9kdWxlID0gXCJ2YXIgZW1iZWRkZWRWYXVsdCA9ICN7dmF1bHRUZXh0fTtcXG5cIlxuICAgIGlmIG5vdCBpc0VuY3J5cHRlZFxuICAgICAgbW9kdWxlRnVuYyA9ICgpIC0+IGVtYmVkZGVkVmF1bHRcbiAgICBlbHNlXG4gICAgICBtb2R1bGUgKz0gXCJ2YXIgc2pjbCA9IHJlcXVpcmUoJ3NqY2wnKTtcXG5cIlxuICAgICAgbW9kdWxlRnVuYyA9IChwYXNzd29yZCkgLT4gSlNPTi5wYXJzZShzamNsLmRlY3J5cHQocGFzc3dvcmQsIGVtYmVkZGVkVmF1bHQpKVxuICAgIG1vZHVsZSArPSBcIm1vZHVsZS5leHBvcnRzID0gXCIgKyBtb2R1bGVGdW5jLnRvU3RyaW5nKClcbiAgICByZXR1cm4gbW9kdWxlXG5cbl9jb21waWxlRXh0ZW5zaW9uID0gKG1pbW9zYUNvbmZpZywgb3B0aW9ucywgbmV4dCkgLT5cbiAgdmF1bHRDb25maWcgPSBtaW1vc2FDb25maWcudmF1bHRcbiAgbG9nZ2VyID0gbWltb3NhQ29uZmlnLmxvZ1xuXG4gIGlmIChvcHRpb25zLmlucHV0RmlsZS5tYXRjaCh2YXVsdENvbmZpZy5leHRlbnNpb25SZWdleCkpXG4gICAgZmlsZSA9IG9wdGlvbnMuZmlsZXNbMF1cbiAgICB0cnlcbiAgICAgIGpzb25fb2JqID0gX3JlcXVpcmVGcm9tU3RyaW5nKGZpbGUub3V0cHV0RmlsZVRleHQsIGZpbGUub3V0cHV0RmlsZU5hbWUpXG5cbiAgICAgIGZpbGUub3V0cHV0RmlsZVRleHQgPSBfdHJhbnNmb3JtT3V0cHV0KGNvbXBpbGVWYXVsdCh2YXVsdENvbmZpZy5wYXNzd29yZEdlbmVyYXRpb25TZWNyZXQsIGpzb25fb2JqKSwgdmF1bHRDb25maWcpXG4gICAgICBmaWxlLm91dHB1dEZpbGVOYW1lID0gX291dHB1dEZpbGVOYW1lKHZhdWx0Q29uZmlnLCBmaWxlLm91dHB1dEZpbGVOYW1lKVxuICAgIGNhdGNoIGVyclxuICAgICAgbG9nZ2VyLmVycm9yKFwibWltb3NhLXZhdWx0IGZhaWxlZCB0byBwcm9jZXNzIFtbICN7ZmlsZS5pbnB1dEZpbGVOYW1lfSBdXTogI3tlcnJ9XCIpXG4gICAgICBvcHRpb25zLmZpbGVzLnNwbGljZShvcHRpb25zLmZpbGVzLmluZGV4T2YoZmlsZSwgMSkpXG4gIG5leHQoKVxuXG5yZWdpc3RyYXRpb24gPSAobWltb3NhQ29uZmlnLCByZWdpc3RlcikgLT5cbiAgZXh0ZW5zaW9ucyA9IG1pbW9zYUNvbmZpZy5leHRlbnNpb25zLmphdmFzY3JpcHRcbiAgcmVnaXN0ZXIoWydidWlsZEZpbGUnLCdhZGQnLCd1cGRhdGUnXSwgJ2FmdGVyQ29tcGlsZScsIF9jb21waWxlRXh0ZW5zaW9uLCBleHRlbnNpb25zKTtcblxubW9kdWxlLmV4cG9ydHMgPVxuICByZWdpc3RyYXRpb246ICAgIHJlZ2lzdHJhdGlvblxuICBkZWZhdWx0czogICAgICAgIGNvbmZpZy5kZWZhdWx0c1xuICBwbGFjZWhvbGRlcjogICAgIGNvbmZpZy5wbGFjZWhvbGRlclxuICB2YWxpZGF0ZTogICAgICAgIGNvbmZpZy52YWxpZGF0ZSJdfQ==
