"use strict";
var compileVault, config, fs, logger, registration, _, _compileExtension, _outputFileName, _requireFromString;

fs = require('fs');

config = require('./config');

logger = null;

_ = require('underscore');

compileVault = require('./plugin');

_requireFromString = function(src, filename) {
  var Module, m;
  Module = module.constructor;
  m = new Module();
  m._compile(src, filename);
  return m.exports;
};

_outputFileName = function(config, inputFileName) {
  return inputFileName.replace(config.extensionRegex, config.outputExtension);
};

_compileExtension = function(mimosaConfig, options, next) {
  var err, file, json_obj;
  config = mimosaConfig.vault;
  logger = mimosaConfig.log;
  if (options.inputFile.match(config.extensionRegex)) {
    file = options.files[0];
    try {
      json_obj = _requireFromString(file.outputFileText, file.outputFileName);
      file.outputFileText = JSON.stringify(compileVault(config.secret, json_obj));
      file.outputFileName = _outputFileName(config, file.outputFileName);
    } catch (_error) {
      err = _error;
      logger.error("mimosa-vault failed to process [[ " + file.inputFileName + " ]]: " + err);
      options.files.splice(options.files.indexOf(file, 1));
    }
  }
  return next();
};

registration = function(config, register) {
  var extensions;
  extensions = config.extensions.javascript;
  return register(['buildFile', 'add', 'update'], 'afterCompile', _compileExtension, extensions);
};

module.exports = {
  registration: registration,
  defaults: config.defaults,
  placeholder: config.placeholder,
  validate: config.validate,
  compileVaule: compileVault
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtdmF1bHQvbGliL2luZGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtdmF1bHQvc3JjL2luZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxZQUFBLENBQUE7QUFBQSxJQUFBLHlHQUFBOztBQUFBLEVBRUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQUZMLENBQUE7O0FBQUEsTUFJQSxHQUFTLE9BQUEsQ0FBUSxVQUFSLENBSlQsQ0FBQTs7QUFBQSxNQUtBLEdBQVMsSUFMVCxDQUFBOztBQUFBLENBT0EsR0FBSSxPQUFBLENBQVEsWUFBUixDQVBKLENBQUE7O0FBQUEsWUFRQSxHQUFlLE9BQUEsQ0FBUSxVQUFSLENBUmYsQ0FBQTs7QUFBQSxrQkFVQSxHQUFxQixTQUFDLEdBQUQsRUFBTSxRQUFOLEdBQUE7QUFDbkIsTUFBQSxTQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDLFdBQWhCLENBQUE7QUFBQSxFQUNBLENBQUEsR0FBUSxJQUFBLE1BQUEsQ0FBQSxDQURSLENBQUE7QUFBQSxFQUVBLENBQUMsQ0FBQyxRQUFGLENBQVcsR0FBWCxFQUFnQixRQUFoQixDQUZBLENBQUE7QUFHQSxTQUFPLENBQUMsQ0FBQyxPQUFULENBSm1CO0FBQUEsQ0FWckIsQ0FBQTs7QUFBQSxlQWdCQSxHQUFrQixTQUFDLE1BQUQsRUFBUyxhQUFULEdBQUE7U0FDaEIsYUFBYSxDQUFDLE9BQWQsQ0FBc0IsTUFBTSxDQUFDLGNBQTdCLEVBQTZDLE1BQU0sQ0FBQyxlQUFwRCxFQURnQjtBQUFBLENBaEJsQixDQUFBOztBQUFBLGlCQW1CQSxHQUFvQixTQUFDLFlBQUQsRUFBZSxPQUFmLEVBQXdCLElBQXhCLEdBQUE7QUFDbEIsTUFBQSxtQkFBQTtBQUFBLEVBQUEsTUFBQSxHQUFTLFlBQVksQ0FBQyxLQUF0QixDQUFBO0FBQUEsRUFDQSxNQUFBLEdBQVMsWUFBWSxDQUFDLEdBRHRCLENBQUE7QUFHQSxFQUFBLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFsQixDQUF3QixNQUFNLENBQUMsY0FBL0IsQ0FBSjtBQUNFLElBQUEsSUFBQSxHQUFPLE9BQU8sQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUFyQixDQUFBO0FBQ0E7QUFDRSxNQUFBLFFBQUEsR0FBVyxrQkFBQSxDQUFtQixJQUFJLENBQUMsY0FBeEIsRUFBd0MsSUFBSSxDQUFDLGNBQTdDLENBQVgsQ0FBQTtBQUFBLE1BQ0EsSUFBSSxDQUFDLGNBQUwsR0FBc0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxZQUFBLENBQWEsTUFBTSxDQUFDLE1BQXBCLEVBQTRCLFFBQTVCLENBQWYsQ0FEdEIsQ0FBQTtBQUFBLE1BRUEsSUFBSSxDQUFDLGNBQUwsR0FBc0IsZUFBQSxDQUFnQixNQUFoQixFQUF3QixJQUFJLENBQUMsY0FBN0IsQ0FGdEIsQ0FERjtLQUFBLGNBQUE7QUFLRSxNQURJLFlBQ0osQ0FBQTtBQUFBLE1BQUEsTUFBTSxDQUFDLEtBQVAsQ0FBYyxvQ0FBQSxHQUFtQyxJQUFJLENBQUMsYUFBeEMsR0FBdUQsT0FBdkQsR0FBNkQsR0FBM0UsQ0FBQSxDQUFBO0FBQUEsTUFDQSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQWQsQ0FBcUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFkLENBQXNCLElBQXRCLEVBQTRCLENBQTVCLENBQXJCLENBREEsQ0FMRjtLQUZGO0dBSEE7U0FZQSxJQUFBLENBQUEsRUFia0I7QUFBQSxDQW5CcEIsQ0FBQTs7QUFBQSxZQWtDQSxHQUFlLFNBQUMsTUFBRCxFQUFTLFFBQVQsR0FBQTtBQUNiLE1BQUEsVUFBQTtBQUFBLEVBQUEsVUFBQSxHQUFhLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBL0IsQ0FBQTtTQUNBLFFBQUEsQ0FBUyxDQUFDLFdBQUQsRUFBYSxLQUFiLEVBQW1CLFFBQW5CLENBQVQsRUFBdUMsY0FBdkMsRUFBdUQsaUJBQXZELEVBQTBFLFVBQTFFLEVBRmE7QUFBQSxDQWxDZixDQUFBOztBQUFBLE1Bc0NNLENBQUMsT0FBUCxHQUNFO0FBQUEsRUFBQSxZQUFBLEVBQWlCLFlBQWpCO0FBQUEsRUFDQSxRQUFBLEVBQWlCLE1BQU0sQ0FBQyxRQUR4QjtBQUFBLEVBRUEsV0FBQSxFQUFpQixNQUFNLENBQUMsV0FGeEI7QUFBQSxFQUdBLFFBQUEsRUFBaUIsTUFBTSxDQUFDLFFBSHhCO0FBQUEsRUFJQSxZQUFBLEVBQWlCLFlBSmpCO0NBdkNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjIyMjIE1vZHVsZSBJbnRlcmZhY2VcblxuXCJ1c2Ugc3RyaWN0XCJcblxuZnMgPSByZXF1aXJlICdmcydcblxuY29uZmlnID0gcmVxdWlyZSAnLi9jb25maWcnXG5sb2dnZXIgPSBudWxsXG5cbl8gPSByZXF1aXJlICd1bmRlcnNjb3JlJ1xuY29tcGlsZVZhdWx0ID0gcmVxdWlyZSgnLi9wbHVnaW4nKVxuXG5fcmVxdWlyZUZyb21TdHJpbmcgPSAoc3JjLCBmaWxlbmFtZSkgLT5cbiAgTW9kdWxlID0gbW9kdWxlLmNvbnN0cnVjdG9yXG4gIG0gPSBuZXcgTW9kdWxlKClcbiAgbS5fY29tcGlsZShzcmMsIGZpbGVuYW1lKVxuICByZXR1cm4gbS5leHBvcnRzXG5cbl9vdXRwdXRGaWxlTmFtZSA9IChjb25maWcsIGlucHV0RmlsZU5hbWUpIC0+XG4gIGlucHV0RmlsZU5hbWUucmVwbGFjZShjb25maWcuZXh0ZW5zaW9uUmVnZXgsIGNvbmZpZy5vdXRwdXRFeHRlbnNpb24pXG5cbl9jb21waWxlRXh0ZW5zaW9uID0gKG1pbW9zYUNvbmZpZywgb3B0aW9ucywgbmV4dCkgLT5cbiAgY29uZmlnID0gbWltb3NhQ29uZmlnLnZhdWx0XG4gIGxvZ2dlciA9IG1pbW9zYUNvbmZpZy5sb2dcblxuICBpZiAob3B0aW9ucy5pbnB1dEZpbGUubWF0Y2goY29uZmlnLmV4dGVuc2lvblJlZ2V4KSlcbiAgICBmaWxlID0gb3B0aW9ucy5maWxlc1swXVxuICAgIHRyeVxuICAgICAganNvbl9vYmogPSBfcmVxdWlyZUZyb21TdHJpbmcoZmlsZS5vdXRwdXRGaWxlVGV4dCwgZmlsZS5vdXRwdXRGaWxlTmFtZSlcbiAgICAgIGZpbGUub3V0cHV0RmlsZVRleHQgPSBKU09OLnN0cmluZ2lmeShjb21waWxlVmF1bHQoY29uZmlnLnNlY3JldCwganNvbl9vYmopKVxuICAgICAgZmlsZS5vdXRwdXRGaWxlTmFtZSA9IF9vdXRwdXRGaWxlTmFtZShjb25maWcsIGZpbGUub3V0cHV0RmlsZU5hbWUpXG4gICAgY2F0Y2ggZXJyXG4gICAgICBsb2dnZXIuZXJyb3IoXCJtaW1vc2EtdmF1bHQgZmFpbGVkIHRvIHByb2Nlc3MgW1sgI3tmaWxlLmlucHV0RmlsZU5hbWV9IF1dOiAje2Vycn1cIilcbiAgICAgIG9wdGlvbnMuZmlsZXMuc3BsaWNlKG9wdGlvbnMuZmlsZXMuaW5kZXhPZihmaWxlLCAxKSlcbiAgbmV4dCgpXG5cbnJlZ2lzdHJhdGlvbiA9IChjb25maWcsIHJlZ2lzdGVyKSAtPlxuICBleHRlbnNpb25zID0gY29uZmlnLmV4dGVuc2lvbnMuamF2YXNjcmlwdFxuICByZWdpc3RlcihbJ2J1aWxkRmlsZScsJ2FkZCcsJ3VwZGF0ZSddLCAnYWZ0ZXJDb21waWxlJywgX2NvbXBpbGVFeHRlbnNpb24sIGV4dGVuc2lvbnMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9XG4gIHJlZ2lzdHJhdGlvbjogICAgcmVnaXN0cmF0aW9uXG4gIGRlZmF1bHRzOiAgICAgICAgY29uZmlnLmRlZmF1bHRzXG4gIHBsYWNlaG9sZGVyOiAgICAgY29uZmlnLnBsYWNlaG9sZGVyXG4gIHZhbGlkYXRlOiAgICAgICAgY29uZmlnLnZhbGlkYXRlXG4gIGNvbXBpbGVWYXVsZTogICAgY29tcGlsZVZhdWx0Il19
