"use strict";
var compileVault, config, fs, logger, registration, _, _compileExtension, _outputFileName, _requireFromString;

fs = require('fs');

config = require('./config');

logger = null;

_ = require('underscore');

compileVault = require('./plugin');

_requireFromString = function(src, filename) {
  var Module, m;
  Module = module.constructor;
  m = new Module();
  m._compile(src, filename);
  return m.exports;
};

_outputFileName = function(mimosaConfig, inputFileName) {
  return inputFileName.replace(mimosaConfig.extensionRegex, mimosaConfig.outputExtension);
};

_compileExtension = function(mimosaConfig, options, next) {
  var err, file, json_obj, vaultConfig;
  vaultConfig = mimosaConfig.vault;
  logger = mimosaConfig.log;
  if (options.inputFile.match(vaultConfig.extensionRegex)) {
    file = options.files[0];
    try {
      json_obj = _requireFromString(file.outputFileText, file.outputFileName);
      file.outputFileText = JSON.stringify(compileVault(vaultConfig.secret, json_obj));
      file.outputFileName = _outputFileName(vaultConfig, file.outputFileName);
    } catch (_error) {
      err = _error;
      logger.error("mimosa-vault failed to process [[ " + file.inputFileName + " ]]: " + err);
      options.files.splice(options.files.indexOf(file, 1));
    }
  }
  return next();
};

registration = function(mimosaConfig, register) {
  var extensions;
  extensions = mimosaConfig.extensions.javascript;
  return register(['buildFile', 'add', 'update'], 'afterCompile', _compileExtension, extensions);
};

module.exports = {
  registration: registration,
  defaults: config.defaults,
  placeholder: config.placeholder,
  validate: config.validate
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtdmF1bHQvbGliL2luZGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25jb2hlbi9zb2Z0d2FyZS9kcnlpdC1wcm9qZWN0cy9taW1vc2EtdmF1bHQvc3JjL2luZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxZQUFBLENBQUE7QUFBQSxJQUFBLHlHQUFBOztBQUFBLEVBRUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQUZMLENBQUE7O0FBQUEsTUFJQSxHQUFTLE9BQUEsQ0FBUSxVQUFSLENBSlQsQ0FBQTs7QUFBQSxNQUtBLEdBQVMsSUFMVCxDQUFBOztBQUFBLENBT0EsR0FBSSxPQUFBLENBQVEsWUFBUixDQVBKLENBQUE7O0FBQUEsWUFRQSxHQUFlLE9BQUEsQ0FBUSxVQUFSLENBUmYsQ0FBQTs7QUFBQSxrQkFVQSxHQUFxQixTQUFDLEdBQUQsRUFBTSxRQUFOLEdBQUE7QUFDbkIsTUFBQSxTQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDLFdBQWhCLENBQUE7QUFBQSxFQUNBLENBQUEsR0FBUSxJQUFBLE1BQUEsQ0FBQSxDQURSLENBQUE7QUFBQSxFQUVBLENBQUMsQ0FBQyxRQUFGLENBQVcsR0FBWCxFQUFnQixRQUFoQixDQUZBLENBQUE7QUFHQSxTQUFPLENBQUMsQ0FBQyxPQUFULENBSm1CO0FBQUEsQ0FWckIsQ0FBQTs7QUFBQSxlQWdCQSxHQUFrQixTQUFDLFlBQUQsRUFBZSxhQUFmLEdBQUE7U0FDaEIsYUFBYSxDQUFDLE9BQWQsQ0FBc0IsWUFBWSxDQUFDLGNBQW5DLEVBQW1ELFlBQVksQ0FBQyxlQUFoRSxFQURnQjtBQUFBLENBaEJsQixDQUFBOztBQUFBLGlCQW1CQSxHQUFvQixTQUFDLFlBQUQsRUFBZSxPQUFmLEVBQXdCLElBQXhCLEdBQUE7QUFDbEIsTUFBQSxnQ0FBQTtBQUFBLEVBQUEsV0FBQSxHQUFjLFlBQVksQ0FBQyxLQUEzQixDQUFBO0FBQUEsRUFDQSxNQUFBLEdBQVMsWUFBWSxDQUFDLEdBRHRCLENBQUE7QUFHQSxFQUFBLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFsQixDQUF3QixXQUFXLENBQUMsY0FBcEMsQ0FBSjtBQUNFLElBQUEsSUFBQSxHQUFPLE9BQU8sQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUFyQixDQUFBO0FBQ0E7QUFDRSxNQUFBLFFBQUEsR0FBVyxrQkFBQSxDQUFtQixJQUFJLENBQUMsY0FBeEIsRUFBd0MsSUFBSSxDQUFDLGNBQTdDLENBQVgsQ0FBQTtBQUFBLE1BQ0EsSUFBSSxDQUFDLGNBQUwsR0FBc0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxZQUFBLENBQWEsV0FBVyxDQUFDLE1BQXpCLEVBQWlDLFFBQWpDLENBQWYsQ0FEdEIsQ0FBQTtBQUFBLE1BRUEsSUFBSSxDQUFDLGNBQUwsR0FBc0IsZUFBQSxDQUFnQixXQUFoQixFQUE2QixJQUFJLENBQUMsY0FBbEMsQ0FGdEIsQ0FERjtLQUFBLGNBQUE7QUFLRSxNQURJLFlBQ0osQ0FBQTtBQUFBLE1BQUEsTUFBTSxDQUFDLEtBQVAsQ0FBYyxvQ0FBQSxHQUFtQyxJQUFJLENBQUMsYUFBeEMsR0FBdUQsT0FBdkQsR0FBNkQsR0FBM0UsQ0FBQSxDQUFBO0FBQUEsTUFDQSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQWQsQ0FBcUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFkLENBQXNCLElBQXRCLEVBQTRCLENBQTVCLENBQXJCLENBREEsQ0FMRjtLQUZGO0dBSEE7U0FZQSxJQUFBLENBQUEsRUFia0I7QUFBQSxDQW5CcEIsQ0FBQTs7QUFBQSxZQWtDQSxHQUFlLFNBQUMsWUFBRCxFQUFlLFFBQWYsR0FBQTtBQUNiLE1BQUEsVUFBQTtBQUFBLEVBQUEsVUFBQSxHQUFhLFlBQVksQ0FBQyxVQUFVLENBQUMsVUFBckMsQ0FBQTtTQUNBLFFBQUEsQ0FBUyxDQUFDLFdBQUQsRUFBYSxLQUFiLEVBQW1CLFFBQW5CLENBQVQsRUFBdUMsY0FBdkMsRUFBdUQsaUJBQXZELEVBQTBFLFVBQTFFLEVBRmE7QUFBQSxDQWxDZixDQUFBOztBQUFBLE1Bc0NNLENBQUMsT0FBUCxHQUNFO0FBQUEsRUFBQSxZQUFBLEVBQWlCLFlBQWpCO0FBQUEsRUFDQSxRQUFBLEVBQWlCLE1BQU0sQ0FBQyxRQUR4QjtBQUFBLEVBRUEsV0FBQSxFQUFpQixNQUFNLENBQUMsV0FGeEI7QUFBQSxFQUdBLFFBQUEsRUFBaUIsTUFBTSxDQUFDLFFBSHhCO0NBdkNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjIyMjIE1vZHVsZSBJbnRlcmZhY2VcblxuXCJ1c2Ugc3RyaWN0XCJcblxuZnMgPSByZXF1aXJlICdmcydcblxuY29uZmlnID0gcmVxdWlyZSAnLi9jb25maWcnXG5sb2dnZXIgPSBudWxsXG5cbl8gPSByZXF1aXJlICd1bmRlcnNjb3JlJ1xuY29tcGlsZVZhdWx0ID0gcmVxdWlyZSgnLi9wbHVnaW4nKVxuXG5fcmVxdWlyZUZyb21TdHJpbmcgPSAoc3JjLCBmaWxlbmFtZSkgLT5cbiAgTW9kdWxlID0gbW9kdWxlLmNvbnN0cnVjdG9yXG4gIG0gPSBuZXcgTW9kdWxlKClcbiAgbS5fY29tcGlsZShzcmMsIGZpbGVuYW1lKVxuICByZXR1cm4gbS5leHBvcnRzXG5cbl9vdXRwdXRGaWxlTmFtZSA9IChtaW1vc2FDb25maWcsIGlucHV0RmlsZU5hbWUpIC0+XG4gIGlucHV0RmlsZU5hbWUucmVwbGFjZShtaW1vc2FDb25maWcuZXh0ZW5zaW9uUmVnZXgsIG1pbW9zYUNvbmZpZy5vdXRwdXRFeHRlbnNpb24pXG5cbl9jb21waWxlRXh0ZW5zaW9uID0gKG1pbW9zYUNvbmZpZywgb3B0aW9ucywgbmV4dCkgLT5cbiAgdmF1bHRDb25maWcgPSBtaW1vc2FDb25maWcudmF1bHRcbiAgbG9nZ2VyID0gbWltb3NhQ29uZmlnLmxvZ1xuXG4gIGlmIChvcHRpb25zLmlucHV0RmlsZS5tYXRjaCh2YXVsdENvbmZpZy5leHRlbnNpb25SZWdleCkpXG4gICAgZmlsZSA9IG9wdGlvbnMuZmlsZXNbMF1cbiAgICB0cnlcbiAgICAgIGpzb25fb2JqID0gX3JlcXVpcmVGcm9tU3RyaW5nKGZpbGUub3V0cHV0RmlsZVRleHQsIGZpbGUub3V0cHV0RmlsZU5hbWUpXG4gICAgICBmaWxlLm91dHB1dEZpbGVUZXh0ID0gSlNPTi5zdHJpbmdpZnkoY29tcGlsZVZhdWx0KHZhdWx0Q29uZmlnLnNlY3JldCwganNvbl9vYmopKVxuICAgICAgZmlsZS5vdXRwdXRGaWxlTmFtZSA9IF9vdXRwdXRGaWxlTmFtZSh2YXVsdENvbmZpZywgZmlsZS5vdXRwdXRGaWxlTmFtZSlcbiAgICBjYXRjaCBlcnJcbiAgICAgIGxvZ2dlci5lcnJvcihcIm1pbW9zYS12YXVsdCBmYWlsZWQgdG8gcHJvY2VzcyBbWyAje2ZpbGUuaW5wdXRGaWxlTmFtZX0gXV06ICN7ZXJyfVwiKVxuICAgICAgb3B0aW9ucy5maWxlcy5zcGxpY2Uob3B0aW9ucy5maWxlcy5pbmRleE9mKGZpbGUsIDEpKVxuICBuZXh0KClcblxucmVnaXN0cmF0aW9uID0gKG1pbW9zYUNvbmZpZywgcmVnaXN0ZXIpIC0+XG4gIGV4dGVuc2lvbnMgPSBtaW1vc2FDb25maWcuZXh0ZW5zaW9ucy5qYXZhc2NyaXB0XG4gIHJlZ2lzdGVyKFsnYnVpbGRGaWxlJywnYWRkJywndXBkYXRlJ10sICdhZnRlckNvbXBpbGUnLCBfY29tcGlsZUV4dGVuc2lvbiwgZXh0ZW5zaW9ucyk7XG5cbm1vZHVsZS5leHBvcnRzID1cbiAgcmVnaXN0cmF0aW9uOiAgICByZWdpc3RyYXRpb25cbiAgZGVmYXVsdHM6ICAgICAgICBjb25maWcuZGVmYXVsdHNcbiAgcGxhY2Vob2xkZXI6ICAgICBjb25maWcucGxhY2Vob2xkZXJcbiAgdmFsaWRhdGU6ICAgICAgICBjb25maWcudmFsaWRhdGUiXX0=
